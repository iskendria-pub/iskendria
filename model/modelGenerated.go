package model

// THIS FILE HAS BEEN GENERATED BY .../generate/model/model
// DO NOT MODIFY!

import "github.com/google/uuid"

func initAllEnumMinMax() {
	var minimum, maximum int32
	minimum, maximum = getManuscriptStatusMinMax()
	MinManuscriptStatus = minimum
	MaxManuscriptStatus = maximum
	minimum, maximum = getJudgementMinMax()
	MinJudgement = minimum
	MaxJudgement = maximum
	minimum, maximum = getManuscriptJudgementMinMax()
	MinManuscriptJudgement = minimum
	MaxManuscriptJudgement = maximum
}

var MinManuscriptStatus int32
var MaxManuscriptStatus int32

func getManuscriptStatusMinMax() (int32, int32) {
	var minimum int32
	var maximum int32
	isFirst := true
	for testValue := range ManuscriptStatus_name {
		if isFirst {
			minimum = testValue
			maximum = testValue
			isFirst = false
		} else {
			if testValue < minimum {
				minimum = testValue
			}
			if testValue > maximum {
				maximum = testValue
			}
		}
	}
	return minimum, maximum
}

var MinJudgement int32
var MaxJudgement int32

func getJudgementMinMax() (int32, int32) {
	var minimum int32
	var maximum int32
	isFirst := true
	for testValue := range Judgement_name {
		if isFirst {
			minimum = testValue
			maximum = testValue
			isFirst = false
		} else {
			if testValue < minimum {
				minimum = testValue
			}
			if testValue > maximum {
				maximum = testValue
			}
		}
	}
	return minimum, maximum
}

var MinManuscriptJudgement int32
var MaxManuscriptJudgement int32

func getManuscriptJudgementMinMax() (int32, int32) {
	var minimum int32
	var maximum int32
	isFirst := true
	for testValue := range ManuscriptJudgement_name {
		if isFirst {
			minimum = testValue
			maximum = testValue
			isFirst = false
		} else {
			if testValue < minimum {
				minimum = testValue
			}
			if testValue > maximum {
				maximum = testValue
			}
		}
	}
	return minimum, maximum
}

const journalAddressPrefix = "20"

func CreateJournalAddress() string {
	var theUuid uuid.UUID = uuid.New()
	uuidDigest := hexdigestOfUuid(theUuid)
	return Namespace + journalAddressPrefix + uuidDigest[:62]
}

func IsJournalAddress(address string) bool {
	return getAddressPrefixFromAddress(address) == journalAddressPrefix
}

const manuscriptAddressPrefix = "10"

func CreateManuscriptAddress() string {
	var theUuid uuid.UUID = uuid.New()
	uuidDigest := hexdigestOfUuid(theUuid)
	return Namespace + manuscriptAddressPrefix + uuidDigest[:62]
}

func IsManuscriptAddress(address string) bool {
	return getAddressPrefixFromAddress(address) == manuscriptAddressPrefix
}

const manuscriptThreadAddressPrefix = "18"

func CreateManuscriptThreadAddress() string {
	var theUuid uuid.UUID = uuid.New()
	uuidDigest := hexdigestOfUuid(theUuid)
	return Namespace + manuscriptThreadAddressPrefix + uuidDigest[:62]
}

func IsManuscriptThreadAddress(address string) bool {
	return getAddressPrefixFromAddress(address) == manuscriptThreadAddressPrefix
}

const reviewAddressPrefix = "30"

func CreateReviewAddress() string {
	var theUuid uuid.UUID = uuid.New()
	uuidDigest := hexdigestOfUuid(theUuid)
	return Namespace + reviewAddressPrefix + uuidDigest[:62]
}

func IsReviewAddress(address string) bool {
	return getAddressPrefixFromAddress(address) == reviewAddressPrefix
}

const personAddressPrefix = "01"

func CreatePersonAddress() string {
	var theUuid uuid.UUID = uuid.New()
	uuidDigest := hexdigestOfUuid(theUuid)
	return Namespace + personAddressPrefix + uuidDigest[:62]
}

func IsPersonAddress(address string) bool {
	return getAddressPrefixFromAddress(address) == personAddressPrefix
}
