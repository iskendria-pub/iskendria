package main

import (
	"fmt"
	"gitlab.bbinfra.net/3estack/alexandria/util"
	"os"
	"strings"
	"text/template"
)

var templateModel = strings.TrimSpace(`
package model

// THIS FILE HAS BEEN GENERATED BY .../generate/model/model
// DO NOT MODIFY!

import "github.com/google/uuid"

{{with .EnumNames -}}
func initAllEnumMinMax() {
	var minimum, maximum int32
    {{range . -}}
	minimum, maximum = get{{.}}MinMax()
	Min{{.}} = minimum
	Max{{.}} = maximum
    {{end -}}
}

{{range . -}}

var Min{{.}} int32
var Max{{.}} int32

func get{{.}}MinMax() (int32, int32) {
	var minimum int32
	var maximum int32
	isFirst := true
	for testValue := range {{.}}_name {
		if isFirst {
			minimum = testValue
			maximum = testValue
			isFirst = false
		} else {
			if testValue < minimum {
				minimum = testValue
			}
			if testValue > maximum {
				maximum = testValue
			}
		}
	}
	return minimum, maximum
}
{{end -}}
{{- end -}}

{{- with .AddressDefs -}}
{{range . -}}

const {{.AddressTypeLower}}AddressPrefix = "{{.Prefix}}"

func Create{{.AddressTypeTitle}}Address() string {
	var theUuid uuid.UUID = uuid.New()
	uuidDigest := hexdigestOfUuid(theUuid)
	return Namespace + {{.AddressTypeLower}}AddressPrefix + uuidDigest[:62]
}

func Is{{.AddressTypeTitle}}Address(address string) bool {
	return getAddressPrefixFromAddress(address) == {{.AddressTypeLower}}AddressPrefix
}

{{end -}}
{{- end -}}
`)

func main() {
	c := &Config{
		EnumNames: []string{
			"ManuscriptStatus", "Judgement",
		},
		AddressDefs: []AddressDef{
			getAddressDef("Journal", "20"),
			getAddressDef("Manuscript", "10"),
			getAddressDef("ManuscriptThread", "18"),
			getAddressDef("Review", "30"),
			getAddressDef("Person", "01"),
		},
	}
	tmpl, err := template.New("templateModel").Parse(templateModel)
	if err != nil {
		fmt.Println("Error parsing template")
		fmt.Println(err)
		return
	}
	err = tmpl.Execute(os.Stdout, c)
	if err != nil {
		fmt.Println(err)
	}
}

type Config struct {
	EnumNames   []string
	AddressDefs []AddressDef
}

type AddressDef struct {
	AddressTypeTitle string
	AddressTypeLower string
	Prefix           string
}

func getAddressDef(addressTypeTitle, prefix string) AddressDef {
	return AddressDef{
		AddressTypeTitle: addressTypeTitle,
		AddressTypeLower: util.UnTitle(addressTypeTitle),
		Prefix:           prefix,
	}
}
